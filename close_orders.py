from datetime import datetime
from io import BytesIO

import pandas as pd
import requests
from aiogram import types
from aiogram.enums import ParseMode
from aiogram.utils.markdown import bold, italic

from loguru import logger
from sqlalchemy import select

from bot_init import bot
from db.models.order_closer_chat import OrderCloserChat
from db.session import get_session
from tomato.core.api.auth import get_tomato_auth_token
from tomato.core.settings import SETTINGS
from tomato.report import get_order_report_by_departments


async def get_all_chats() -> list[OrderCloserChat]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –∑–∞–∫–∞–∑–æ–≤

    :return: —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –∑–∞–∫–∞–∑–æ–≤
    """
    try:
        async with get_session() as session:
            result = await session.execute(select(OrderCloserChat))
            chats = result.scalars().all()
            if chats:
                return chats
            return []

    except Exception as e:
        err = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤'
        logger.exception(err)
        raise Exception(err) from e


async def close_orders() -> None:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å OrderCloser"""

    logger.info('–ù–∞—á–∏–Ω–∞—é –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤...')

    try:
        logger.info('–ü–æ–ª—É—á–∞—é —á–∞—Ç—ã...')
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –∑–∞–∫–∞–∑–æ–≤
        chats = await get_all_chats()
    except Exception as e:
        err = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {e}'
        logger.exception(err)
        return

    logger.info('–ß–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã')

    try:
        logger.info('–ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω...')
        token = get_tomato_auth_token()
    except Exception as e:
        err = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}'
        logger.exception(err)
        return
    logger.info('–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω')

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤...')
    try:
        url = SETTINGS.ORDERS_CLOSER_API_URL + '/orders/close-confirmed'
        response = requests.post(url, json={'token': token})

        response.raise_for_status()
        logger.info('–ó–∞–∫–∞–∑—ã –∑–∞–∫—Ä—ã—Ç—ã')
        response = response.json()
        for chat in chats:
            chat_id = chat.id
            await bot.send_message(chat_id, '–ó–∞–∫–∞–∑—ã –∑–∞–∫—Ä—ã—Ç—ã')
            await bot.send_message(chat_id, response.get('message'))
            await bot.send_message(chat.id, bold(f"–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"), parse_mode=ParseMode.MARKDOWN)

        logger.info('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

        df = get_order_report_by_departments(token=token)
        for i, row in df.iterrows():
            department = row.get('–†–µ—Å—Ç–æ—Ä–∞–Ω')
            count_orders = row.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
            count_cancelled_orders = row.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö')
            avg_check = row.get('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫')
            delivery_sum = row.get('–°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞')
            summ = row.get('–°—É–º–º–∞ –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º')
            message = (
                f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {bold(department)}\n"
                f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {italic(count_orders)}\n"
                f"  –û—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö: {italic(count_cancelled_orders)}\n"
                f"  –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {round(avg_check, 2)}\n"
                f"  –°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {italic(delivery_sum)}\n"
                f"  –°—É–º–º–∞ –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º: {bold(summ)}\n"
            )
            for chat in chats:
                await bot.send_message(chat.id, message, parse_mode=ParseMode.MARKDOWN)

        # –°–æ–∑–¥–∞–µ–º Excel –≤ –ø–∞–º—è—Ç–∏
        #excel_buffer = BytesIO()

        #with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
        #    df.to_excel(writer, index=False, sheet_name='–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç')
        #excel_buffer.seek(0)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ —Ñ–∞–π–ª–æ–º
        #caption_text = "üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏"
        #date = datetime.now().strftime('%Y-%m-%d')
        #document = types.BufferedInputFile(excel_buffer.read(), filename=f"report_{date}.xlsx"),

        #for chat in chats:
        #    chat = chat.id
        #    await bot.send_document(chat, document=document, caption=caption_text)

    except Exception as e:
        err = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}'
        logger.exception(err)
